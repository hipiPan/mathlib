#pragma once
/*
 * 1  0  0  x
 * 0  1  0  y
 * 0  0  1  z
 * 0  0  0  1
*/
class Matrix4
{
public:
	Matrix4()
	{
		m[0][0] = 0.0; m[0][1] = 0.0; m[0][2] = 0.0; m[0][3] = 0.0;
		m[1][0] = 0.0; m[1][1] = 0.0; m[1][2] = 0.0; m[1][3] = 0.0;
		m[2][0] = 0.0; m[2][1] = 0.0; m[2][2] = 0.0; m[2][3] = 0.0;
		m[3][0] = 0.0; m[3][1] = 0.0; m[3][2] = 0.0; m[3][3] = 0.0;
	}
	Matrix4(
		float m00, float m01, float m02, float m03,
		float m10, float m11, float m12, float m13,
		float m20, float m21, float m22, float m23,
		float m30, float m31, float m32, float m33)
	{
		m[0][0] = m00; m[0][1] = m01; m[0][2] = m02; m[0][3] = m03;
		m[1][0] = m10; m[1][1] = m11; m[1][2] = m12; m[1][3] = m13;
		m[2][0] = m20; m[2][1] = m21; m[2][2] = m22; m[2][3] = m23;
		m[3][0] = m30; m[3][1] = m31; m[3][2] = m32; m[3][3] = m33;
	}

	Matrix4 operator* (const Matrix4& rhs) const
	{
		Matrix4 r;

		r.m[0][0] = m[0][0] * rhs.m[0][0] + m[0][1] * rhs.m[1][0] + m[0][2] * rhs.m[2][0] + m[0][3] * rhs.m[3][0];
		r.m[0][1] = m[0][0] * rhs.m[0][1] + m[0][1] * rhs.m[1][1] + m[0][2] * rhs.m[2][1] + m[0][3] * rhs.m[3][1];
		r.m[0][2] = m[0][0] * rhs.m[0][2] + m[0][1] * rhs.m[1][2] + m[0][2] * rhs.m[2][2] + m[0][3] * rhs.m[3][2];
		r.m[0][3] = m[0][0] * rhs.m[0][3] + m[0][1] * rhs.m[1][3] + m[0][2] * rhs.m[2][3] + m[0][3] * rhs.m[3][3];

		r.m[1][0] = m[1][0] * rhs.m[0][0] + m[1][1] * rhs.m[1][0] + m[1][2] * rhs.m[2][0] + m[1][3] * rhs.m[3][0];
		r.m[1][1] = m[1][0] * rhs.m[0][1] + m[1][1] * rhs.m[1][1] + m[1][2] * rhs.m[2][1] + m[1][3] * rhs.m[3][1];
		r.m[1][2] = m[1][0] * rhs.m[0][2] + m[1][1] * rhs.m[1][2] + m[1][2] * rhs.m[2][2] + m[1][3] * rhs.m[3][2];
		r.m[1][3] = m[1][0] * rhs.m[0][3] + m[1][1] * rhs.m[1][3] + m[1][2] * rhs.m[2][3] + m[1][3] * rhs.m[3][3];

		r.m[2][0] = m[2][0] * rhs.m[0][0] + m[2][1] * rhs.m[1][0] + m[2][2] * rhs.m[2][0] + m[2][3] * rhs.m[3][0];
		r.m[2][1] = m[2][0] * rhs.m[0][1] + m[2][1] * rhs.m[1][1] + m[2][2] * rhs.m[2][1] + m[2][3] * rhs.m[3][1];
		r.m[2][2] = m[2][0] * rhs.m[0][2] + m[2][1] * rhs.m[1][2] + m[2][2] * rhs.m[2][2] + m[2][3] * rhs.m[3][2];
		r.m[2][3] = m[2][0] * rhs.m[0][3] + m[2][1] * rhs.m[1][3] + m[2][2] * rhs.m[2][3] + m[2][3] * rhs.m[3][3];

		r.m[3][0] = m[3][0] * rhs.m[0][0] + m[3][1] * rhs.m[1][0] + m[3][2] * rhs.m[2][0] + m[3][3] * rhs.m[3][0];
		r.m[3][1] = m[3][0] * rhs.m[0][1] + m[3][1] * rhs.m[1][1] + m[3][2] * rhs.m[2][1] + m[3][3] * rhs.m[3][1];
		r.m[3][2] = m[3][0] * rhs.m[0][2] + m[3][1] * rhs.m[1][2] + m[3][2] * rhs.m[2][2] + m[3][3] * rhs.m[3][2];
		r.m[3][3] = m[3][0] * rhs.m[0][3] + m[3][1] * rhs.m[1][3] + m[3][2] * rhs.m[2][3] + m[3][3] * rhs.m[3][3];

		return r;
	}

	Matrix4 operator+ (const Matrix4& rhs) const
	{
		Matrix4 r;

		r.m[0][0] = m[0][0] + rhs.m[0][0];
		r.m[0][1] = m[0][1] + rhs.m[0][1];
		r.m[0][2] = m[0][2] + rhs.m[0][2];
		r.m[0][3] = m[0][3] + rhs.m[0][3];

		r.m[1][0] = m[1][0] + rhs.m[1][0];
		r.m[1][1] = m[1][1] + rhs.m[1][1];
		r.m[1][2] = m[1][2] + rhs.m[1][2];
		r.m[1][3] = m[1][3] + rhs.m[1][3];

		r.m[2][0] = m[2][0] + rhs.m[2][0];
		r.m[2][1] = m[2][1] + rhs.m[2][1];
		r.m[2][2] = m[2][2] + rhs.m[2][2];
		r.m[2][3] = m[2][3] + rhs.m[2][3];

		r.m[3][0] = m[3][0] + rhs.m[3][0];
		r.m[3][1] = m[3][1] + rhs.m[3][1];
		r.m[3][2] = m[3][2] + rhs.m[3][2];
		r.m[3][3] = m[3][3] + rhs.m[3][3];

		return r;
	}

	Matrix4 operator- (const Matrix4& rhs) const
	{
		Matrix4 r;
		r.m[0][0] = m[0][0] - rhs.m[0][0];
		r.m[0][1] = m[0][1] - rhs.m[0][1];
		r.m[0][2] = m[0][2] - rhs.m[0][2];
		r.m[0][3] = m[0][3] - rhs.m[0][3];

		r.m[1][0] = m[1][0] - rhs.m[1][0];
		r.m[1][1] = m[1][1] - rhs.m[1][1];
		r.m[1][2] = m[1][2] - rhs.m[1][2];
		r.m[1][3] = m[1][3] - rhs.m[1][3];

		r.m[2][0] = m[2][0] - rhs.m[2][0];
		r.m[2][1] = m[2][1] - rhs.m[2][1];
		r.m[2][2] = m[2][2] - rhs.m[2][2];
		r.m[2][3] = m[2][3] - rhs.m[2][3];

		r.m[3][0] = m[3][0] - rhs.m[3][0];
		r.m[3][1] = m[3][1] - rhs.m[3][1];
		r.m[3][2] = m[3][2] - rhs.m[3][2];
		r.m[3][3] = m[3][3] - rhs.m[3][3];

		return r;
	}

	bool operator== (const Matrix4& rhs) const
	{
		if (m[0][0] != rhs.m[0][0] || m[0][1] != rhs.m[0][1] || m[0][2] != rhs.m[0][2] || m[0][3] != rhs.m[0][3] ||
			m[1][0] != rhs.m[1][0] || m[1][1] != rhs.m[1][1] || m[1][2] != rhs.m[1][2] || m[1][3] != rhs.m[1][3] ||
			m[2][0] != rhs.m[2][0] || m[2][1] != rhs.m[2][1] || m[2][2] != rhs.m[2][2] || m[2][3] != rhs.m[2][3] ||
			m[3][0] != rhs.m[3][0] || m[3][1] != rhs.m[3][1] || m[3][2] != rhs.m[3][2] || m[3][3] != rhs.m[3][3])
		{
			return false;
		}

		return true;
	}

	bool operator!= (const Matrix4& rhs) const
	{
		return !operator==(rhs);
	}

	Matrix4 transpose() const
	{
		return Matrix4(m[0][0], m[1][0], m[2][0], m[3][0],
			m[0][1], m[1][1], m[2][1], m[3][1],
			m[0][2], m[1][2], m[2][2], m[3][2],
			m[0][3], m[1][3], m[2][3], m[3][3]);
	}

private:
	float m[4][4];
};